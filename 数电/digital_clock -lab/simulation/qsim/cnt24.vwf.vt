// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2021 21:32:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cnt24
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cnt24_vlg_sample_tst(
	clk_24,
	sampler_tx
);
input  clk_24;
output sampler_tx;

reg sample;
time current_time;
always @(clk_24)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cnt24_vlg_check_tst (
	q_10,
	q_11,
	q_12,
	q_13,
	q_100,
	q_101,
	q_102,
	q_103,
	sampler_rx
);
input  q_10;
input  q_11;
input  q_12;
input  q_13;
input  q_100;
input  q_101;
input  q_102;
input  q_103;
input sampler_rx;

reg  q_10_expected;
reg  q_11_expected;
reg  q_12_expected;
reg  q_13_expected;
reg  q_100_expected;
reg  q_101_expected;
reg  q_102_expected;
reg  q_103_expected;

reg  q_10_prev;
reg  q_11_prev;
reg  q_12_prev;
reg  q_13_prev;
reg  q_100_prev;
reg  q_101_prev;
reg  q_102_prev;
reg  q_103_prev;

reg  q_10_expected_prev;
reg  q_11_expected_prev;
reg  q_12_expected_prev;
reg  q_13_expected_prev;
reg  q_100_expected_prev;
reg  q_101_expected_prev;
reg  q_102_expected_prev;
reg  q_103_expected_prev;

reg  last_q_10_exp;
reg  last_q_11_exp;
reg  last_q_12_exp;
reg  last_q_13_exp;
reg  last_q_100_exp;
reg  last_q_101_exp;
reg  last_q_102_exp;
reg  last_q_103_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	q_10_prev = q_10;
	q_11_prev = q_11;
	q_12_prev = q_12;
	q_13_prev = q_13;
	q_100_prev = q_100;
	q_101_prev = q_101;
	q_102_prev = q_102;
	q_103_prev = q_103;
end

// update expected /o prevs

always @(trigger)
begin
	q_10_expected_prev = q_10_expected;
	q_11_expected_prev = q_11_expected;
	q_12_expected_prev = q_12_expected;
	q_13_expected_prev = q_13_expected;
	q_100_expected_prev = q_100_expected;
	q_101_expected_prev = q_101_expected;
	q_102_expected_prev = q_102_expected;
	q_103_expected_prev = q_103_expected;
end



// expected q_13
initial
begin
	q_13_expected = 1'bX;
end 

// expected q_12
initial
begin
	q_12_expected = 1'bX;
end 

// expected q_11
initial
begin
	q_11_expected = 1'bX;
end 

// expected q_10
initial
begin
	q_10_expected = 1'bX;
end 

// expected q_103
initial
begin
	q_103_expected = 1'bX;
end 

// expected q_102
initial
begin
	q_102_expected = 1'bX;
end 

// expected q_101
initial
begin
	q_101_expected = 1'bX;
end 

// expected q_100
initial
begin
	q_100_expected = 1'bX;
end 
// generate trigger
always @(q_10_expected or q_10 or q_11_expected or q_11 or q_12_expected or q_12 or q_13_expected or q_13 or q_100_expected or q_100 or q_101_expected or q_101 or q_102_expected or q_102 or q_103_expected or q_103)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected q_10 = %b | expected q_11 = %b | expected q_12 = %b | expected q_13 = %b | expected q_100 = %b | expected q_101 = %b | expected q_102 = %b | expected q_103 = %b | ",q_10_expected_prev,q_11_expected_prev,q_12_expected_prev,q_13_expected_prev,q_100_expected_prev,q_101_expected_prev,q_102_expected_prev,q_103_expected_prev);
	$display("| real q_10 = %b | real q_11 = %b | real q_12 = %b | real q_13 = %b | real q_100 = %b | real q_101 = %b | real q_102 = %b | real q_103 = %b | ",q_10_prev,q_11_prev,q_12_prev,q_13_prev,q_100_prev,q_101_prev,q_102_prev,q_103_prev);
`endif
	if (
		( q_10_expected_prev !== 1'bx ) && ( q_10_prev !== q_10_expected_prev )
		&& ((q_10_expected_prev !== last_q_10_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_10_expected_prev);
		$display ("     Real value = %b", q_10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_10_exp = q_10_expected_prev;
	end
	if (
		( q_11_expected_prev !== 1'bx ) && ( q_11_prev !== q_11_expected_prev )
		&& ((q_11_expected_prev !== last_q_11_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_11_expected_prev);
		$display ("     Real value = %b", q_11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_11_exp = q_11_expected_prev;
	end
	if (
		( q_12_expected_prev !== 1'bx ) && ( q_12_prev !== q_12_expected_prev )
		&& ((q_12_expected_prev !== last_q_12_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_12_expected_prev);
		$display ("     Real value = %b", q_12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q_12_exp = q_12_expected_prev;
	end
	if (
		( q_13_expected_prev !== 1'bx ) && ( q_13_prev !== q_13_expected_prev )
		&& ((q_13_expected_prev !== last_q_13_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_13_expected_prev);
		$display ("     Real value = %b", q_13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_q_13_exp = q_13_expected_prev;
	end
	if (
		( q_100_expected_prev !== 1'bx ) && ( q_100_prev !== q_100_expected_prev )
		&& ((q_100_expected_prev !== last_q_100_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_100 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_100_expected_prev);
		$display ("     Real value = %b", q_100_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_q_100_exp = q_100_expected_prev;
	end
	if (
		( q_101_expected_prev !== 1'bx ) && ( q_101_prev !== q_101_expected_prev )
		&& ((q_101_expected_prev !== last_q_101_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_101 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_101_expected_prev);
		$display ("     Real value = %b", q_101_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_q_101_exp = q_101_expected_prev;
	end
	if (
		( q_102_expected_prev !== 1'bx ) && ( q_102_prev !== q_102_expected_prev )
		&& ((q_102_expected_prev !== last_q_102_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_102 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_102_expected_prev);
		$display ("     Real value = %b", q_102_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_q_102_exp = q_102_expected_prev;
	end
	if (
		( q_103_expected_prev !== 1'bx ) && ( q_103_prev !== q_103_expected_prev )
		&& ((q_103_expected_prev !== last_q_103_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q_103 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_103_expected_prev);
		$display ("     Real value = %b", q_103_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_q_103_exp = q_103_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cnt24_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_24;
// wires                                               
wire q_10;
wire q_11;
wire q_12;
wire q_13;
wire q_100;
wire q_101;
wire q_102;
wire q_103;

wire sampler;                             

// assign statements (if any)                          
cnt24 i1 (
// port map - connection between master ports and signals/registers   
	.clk_24(clk_24),
	.q_10(q_10),
	.q_11(q_11),
	.q_12(q_12),
	.q_13(q_13),
	.q_100(q_100),
	.q_101(q_101),
	.q_102(q_102),
	.q_103(q_103)
);

// clk_24
always
begin
	clk_24 = 1'b0;
	clk_24 = #10000 1'b1;
	#10000;
end 

cnt24_vlg_sample_tst tb_sample (
	.clk_24(clk_24),
	.sampler_tx(sampler)
);

cnt24_vlg_check_tst tb_out(
	.q_10(q_10),
	.q_11(q_11),
	.q_12(q_12),
	.q_13(q_13),
	.q_100(q_100),
	.q_101(q_101),
	.q_102(q_102),
	.q_103(q_103),
	.sampler_rx(sampler)
);
endmodule


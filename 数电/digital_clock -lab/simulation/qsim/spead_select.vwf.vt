// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2021 22:33:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    spead_select
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module spead_select_vlg_sample_tst(
	clk_1Hz,
	clk_1kHz,
	sw_000,
	sampler_tx
);
input  clk_1Hz;
input  clk_1kHz;
input  sw_000;
output sampler_tx;

reg sample;
time current_time;
always @(clk_1Hz or clk_1kHz or sw_000)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module spead_select_vlg_check_tst (
	output,
	sampler_rx
);
input  output;
input sampler_rx;

reg  output_expected;

reg  output_prev;

reg  output_expected_prev;

reg  last_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	output_prev = output;
end

// update expected /o prevs

always @(trigger)
begin
	output_expected_prev = output_expected;
end



// expected output
initial
begin
	output_expected = 1'bX;
end 
// generate trigger
always @(output_expected or output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected output = %b | ",output_expected_prev);
	$display("| real output = %b | ",output_prev);
`endif
	if (
		( output_expected_prev !== 1'bx ) && ( output_prev !== output_expected_prev )
		&& ((output_expected_prev !== last_output_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_output_exp = output_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module spead_select_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_1Hz;
reg clk_1kHz;
reg sw_000;
// wires                                               
wire output;

wire sampler;                             

// assign statements (if any)                          
spead_select i1 (
// port map - connection between master ports and signals/registers   
	.clk_1Hz(clk_1Hz),
	.clk_1kHz(clk_1kHz),
	.\output (output),
	.sw_000(sw_000)
);

// clk_1Hz
always
begin
	clk_1Hz = 1'b0;
	clk_1Hz = #5000 1'b1;
	#5000;
end 

// clk_1kHz
always
begin
	clk_1kHz = 1'b0;
	clk_1kHz = #50000 1'b1;
	#50000;
end 

// sw_000
always
begin
	sw_000 = 1'b0;
	sw_000 = #250000 1'b1;
	#250000;
end 

spead_select_vlg_sample_tst tb_sample (
	.clk_1Hz(clk_1Hz),
	.clk_1kHz(clk_1kHz),
	.sw_000(sw_000),
	.sampler_tx(sampler)
);

spead_select_vlg_check_tst tb_out(
	.output(output),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/07/2023 10:47:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cnt24_8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cnt24_8_vlg_sample_tst(
	clk_24_8,
	sampler_tx
);
input  clk_24_8;
output sampler_tx;

reg sample;
time current_time;
always @(clk_24_8)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cnt24_8_vlg_check_tst (
	co_8,
	q1_8,
	q10_8,
	sampler_rx
);
input  co_8;
input [3:0] q1_8;
input [3:0] q10_8;
input sampler_rx;

reg  co_8_expected;
reg [3:0] q1_8_expected;
reg [3:0] q10_8_expected;

reg  co_8_prev;
reg [3:0] q1_8_prev;
reg [3:0] q10_8_prev;

reg  co_8_expected_prev;
reg [3:0] q1_8_expected_prev;
reg [3:0] q10_8_expected_prev;

reg  last_co_8_exp;
reg [3:0] last_q1_8_exp;
reg [3:0] last_q10_8_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	co_8_prev = co_8;
	q1_8_prev = q1_8;
	q10_8_prev = q10_8;
end

// update expected /o prevs

always @(trigger)
begin
	co_8_expected_prev = co_8_expected;
	q1_8_expected_prev = q1_8_expected;
	q10_8_expected_prev = q10_8_expected;
end



// expected co_8
initial
begin
	co_8_expected = 1'bX;
end 
// expected q1_8[ 3 ]
initial
begin
	q1_8_expected[3] = 1'bX;
end 
// expected q1_8[ 2 ]
initial
begin
	q1_8_expected[2] = 1'bX;
end 
// expected q1_8[ 1 ]
initial
begin
	q1_8_expected[1] = 1'bX;
end 
// expected q1_8[ 0 ]
initial
begin
	q1_8_expected[0] = 1'bX;
end 
// expected q10_8[ 3 ]
initial
begin
	q10_8_expected[3] = 1'bX;
end 
// expected q10_8[ 2 ]
initial
begin
	q10_8_expected[2] = 1'bX;
end 
// expected q10_8[ 1 ]
initial
begin
	q10_8_expected[1] = 1'bX;
end 
// expected q10_8[ 0 ]
initial
begin
	q10_8_expected[0] = 1'bX;
end 
// generate trigger
always @(co_8_expected or co_8 or q1_8_expected or q1_8 or q10_8_expected or q10_8)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected co_8 = %b | expected q1_8 = %b | expected q10_8 = %b | ",co_8_expected_prev,q1_8_expected_prev,q10_8_expected_prev);
	$display("| real co_8 = %b | real q1_8 = %b | real q10_8 = %b | ",co_8_prev,q1_8_prev,q10_8_prev);
`endif
	if (
		( co_8_expected_prev !== 1'bx ) && ( co_8_prev !== co_8_expected_prev )
		&& ((co_8_expected_prev !== last_co_8_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port co_8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", co_8_expected_prev);
		$display ("     Real value = %b", co_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_co_8_exp = co_8_expected_prev;
	end
	if (
		( q1_8_expected_prev[0] !== 1'bx ) && ( q1_8_prev[0] !== q1_8_expected_prev[0] )
		&& ((q1_8_expected_prev[0] !== last_q1_8_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1_8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1_8_expected_prev);
		$display ("     Real value = %b", q1_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1_8_exp[0] = q1_8_expected_prev[0];
	end
	if (
		( q1_8_expected_prev[1] !== 1'bx ) && ( q1_8_prev[1] !== q1_8_expected_prev[1] )
		&& ((q1_8_expected_prev[1] !== last_q1_8_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1_8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1_8_expected_prev);
		$display ("     Real value = %b", q1_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1_8_exp[1] = q1_8_expected_prev[1];
	end
	if (
		( q1_8_expected_prev[2] !== 1'bx ) && ( q1_8_prev[2] !== q1_8_expected_prev[2] )
		&& ((q1_8_expected_prev[2] !== last_q1_8_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1_8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1_8_expected_prev);
		$display ("     Real value = %b", q1_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1_8_exp[2] = q1_8_expected_prev[2];
	end
	if (
		( q1_8_expected_prev[3] !== 1'bx ) && ( q1_8_prev[3] !== q1_8_expected_prev[3] )
		&& ((q1_8_expected_prev[3] !== last_q1_8_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q1_8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q1_8_expected_prev);
		$display ("     Real value = %b", q1_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q1_8_exp[3] = q1_8_expected_prev[3];
	end
	if (
		( q10_8_expected_prev[0] !== 1'bx ) && ( q10_8_prev[0] !== q10_8_expected_prev[0] )
		&& ((q10_8_expected_prev[0] !== last_q10_8_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q10_8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q10_8_expected_prev);
		$display ("     Real value = %b", q10_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q10_8_exp[0] = q10_8_expected_prev[0];
	end
	if (
		( q10_8_expected_prev[1] !== 1'bx ) && ( q10_8_prev[1] !== q10_8_expected_prev[1] )
		&& ((q10_8_expected_prev[1] !== last_q10_8_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q10_8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q10_8_expected_prev);
		$display ("     Real value = %b", q10_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q10_8_exp[1] = q10_8_expected_prev[1];
	end
	if (
		( q10_8_expected_prev[2] !== 1'bx ) && ( q10_8_prev[2] !== q10_8_expected_prev[2] )
		&& ((q10_8_expected_prev[2] !== last_q10_8_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q10_8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q10_8_expected_prev);
		$display ("     Real value = %b", q10_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q10_8_exp[2] = q10_8_expected_prev[2];
	end
	if (
		( q10_8_expected_prev[3] !== 1'bx ) && ( q10_8_prev[3] !== q10_8_expected_prev[3] )
		&& ((q10_8_expected_prev[3] !== last_q10_8_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q10_8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q10_8_expected_prev);
		$display ("     Real value = %b", q10_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_q10_8_exp[3] = q10_8_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cnt24_8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_24_8;
// wires                                               
wire co_8;
wire [3:0] q1_8;
wire [3:0] q10_8;

wire sampler;                             

// assign statements (if any)                          
cnt24_8 i1 (
// port map - connection between master ports and signals/registers   
	.clk_24_8(clk_24_8),
	.co_8(co_8),
	.q1_8(q1_8),
	.q10_8(q10_8)
);

// clk_24_8
always
begin
	clk_24_8 = 1'b0;
	clk_24_8 = #2500 1'b1;
	#2500;
end 

cnt24_8_vlg_sample_tst tb_sample (
	.clk_24_8(clk_24_8),
	.sampler_tx(sampler)
);

cnt24_8_vlg_check_tst tb_out(
	.co_8(co_8),
	.q1_8(q1_8),
	.q10_8(q10_8),
	.sampler_rx(sampler)
);
endmodule


// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/20/2020 19:25:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    code_select
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module code_select_vlg_sample_tst(
	add,
	data0x,
	data1x,
	data2x,
	data3x,
	data4x,
	data5x,
	sampler_tx
);
input [2:0] add;
input [3:0] data0x;
input [3:0] data1x;
input [3:0] data2x;
input [3:0] data3x;
input [3:0] data4x;
input [3:0] data5x;
output sampler_tx;

reg sample;
time current_time;
always @(add or data0x or data1x or data2x or data3x or data4x or data5x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module code_select_vlg_check_tst (
	code,
	sampler_rx
);
input [3:0] code;
input sampler_rx;

reg [3:0] code_expected;

reg [3:0] code_prev;

reg [3:0] code_expected_prev;

reg [3:0] last_code_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	code_prev = code;
end

// update expected /o prevs

always @(trigger)
begin
	code_expected_prev = code_expected;
end


// expected code[ 3 ]
initial
begin
	code_expected[3] = 1'bX;
end 
// expected code[ 2 ]
initial
begin
	code_expected[2] = 1'bX;
end 
// expected code[ 1 ]
initial
begin
	code_expected[1] = 1'bX;
end 
// expected code[ 0 ]
initial
begin
	code_expected[0] = 1'bX;
end 
// generate trigger
always @(code_expected or code)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected code = %b | ",code_expected_prev);
	$display("| real code = %b | ",code_prev);
`endif
	if (
		( code_expected_prev[0] !== 1'bx ) && ( code_prev[0] !== code_expected_prev[0] )
		&& ((code_expected_prev[0] !== last_code_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_expected_prev);
		$display ("     Real value = %b", code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_exp[0] = code_expected_prev[0];
	end
	if (
		( code_expected_prev[1] !== 1'bx ) && ( code_prev[1] !== code_expected_prev[1] )
		&& ((code_expected_prev[1] !== last_code_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_expected_prev);
		$display ("     Real value = %b", code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_exp[1] = code_expected_prev[1];
	end
	if (
		( code_expected_prev[2] !== 1'bx ) && ( code_prev[2] !== code_expected_prev[2] )
		&& ((code_expected_prev[2] !== last_code_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_expected_prev);
		$display ("     Real value = %b", code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_exp[2] = code_expected_prev[2];
	end
	if (
		( code_expected_prev[3] !== 1'bx ) && ( code_prev[3] !== code_expected_prev[3] )
		&& ((code_expected_prev[3] !== last_code_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_expected_prev);
		$display ("     Real value = %b", code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_exp[3] = code_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module code_select_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] add;
reg [3:0] data0x;
reg [3:0] data1x;
reg [3:0] data2x;
reg [3:0] data3x;
reg [3:0] data4x;
reg [3:0] data5x;
// wires                                               
wire [3:0] code;

wire sampler;                             

// assign statements (if any)                          
code_select i1 (
// port map - connection between master ports and signals/registers   
	.add(add),
	.code(code),
	.data0x(data0x),
	.data1x(data1x),
	.data2x(data2x),
	.data3x(data3x),
	.data4x(data4x),
	.data5x(data5x)
);
// add[ 2 ]
initial
begin
	repeat(3)
	begin
		add[2] = 1'b0;
		add[2] = #160000 1'b1;
		# 160000;
	end
	add[2] = 1'b0;
end 
// add[ 1 ]
initial
begin
	repeat(6)
	begin
		add[1] = 1'b0;
		add[1] = #80000 1'b1;
		# 80000;
	end
	add[1] = 1'b0;
end 
// add[ 0 ]
initial
begin
	repeat(12)
	begin
		add[0] = 1'b0;
		add[0] = #40000 1'b1;
		# 40000;
	end
	add[0] = 1'b0;
end 
// data0x[ 3 ]
initial
begin
	data0x[3] = 1'b0;
end 
// data0x[ 2 ]
initial
begin
	data0x[2] = 1'b0;
end 
// data0x[ 1 ]
initial
begin
	data0x[1] = 1'b0;
end 
// data0x[ 0 ]
initial
begin
	data0x[0] = 1'b0;
end 
// data1x[ 3 ]
initial
begin
	data1x[3] = 1'b0;
end 
// data1x[ 2 ]
initial
begin
	data1x[2] = 1'b0;
end 
// data1x[ 1 ]
initial
begin
	data1x[1] = 1'b0;
end 
// data1x[ 0 ]
initial
begin
	data1x[0] = 1'b1;
end 
// data2x[ 3 ]
initial
begin
	data2x[3] = 1'b0;
end 
// data2x[ 2 ]
initial
begin
	data2x[2] = 1'b0;
end 
// data2x[ 1 ]
initial
begin
	data2x[1] = 1'b1;
end 
// data2x[ 0 ]
initial
begin
	data2x[0] = 1'b0;
end 
// data3x[ 3 ]
initial
begin
	data3x[3] = 1'b0;
end 
// data3x[ 2 ]
initial
begin
	data3x[2] = 1'b0;
end 
// data3x[ 1 ]
initial
begin
	data3x[1] = 1'b1;
end 
// data3x[ 0 ]
initial
begin
	data3x[0] = 1'b1;
end 
// data4x[ 3 ]
initial
begin
	data4x[3] = 1'b0;
end 
// data4x[ 2 ]
initial
begin
	data4x[2] = 1'b1;
end 
// data4x[ 1 ]
initial
begin
	data4x[1] = 1'b0;
end 
// data4x[ 0 ]
initial
begin
	data4x[0] = 1'b0;
end 
// data5x[ 3 ]
initial
begin
	data5x[3] = 1'b0;
end 
// data5x[ 2 ]
initial
begin
	data5x[2] = 1'b1;
end 
// data5x[ 1 ]
initial
begin
	data5x[1] = 1'b0;
end 
// data5x[ 0 ]
initial
begin
	data5x[0] = 1'b1;
end 

code_select_vlg_sample_tst tb_sample (
	.add(add),
	.data0x(data0x),
	.data1x(data1x),
	.data2x(data2x),
	.data3x(data3x),
	.data4x(data4x),
	.data5x(data5x),
	.sampler_tx(sampler)
);

code_select_vlg_check_tst tb_out(
	.code(code),
	.sampler_rx(sampler)
);
endmodule

